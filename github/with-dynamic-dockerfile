name: SAST Pipeline - Docker with Dynamic Dockerfile

on:
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize, reopened]

jobs:
  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source=. --exit-code=1 --verbose --report-format=json --report-path=gitleaks-report.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional for orgs

  trivy-scan:
    name: Trivy Docker Scan (Dynamic Dockerfile)
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Dockerfile and Build Image
        id: dockerfile
        run: |
          FILE=$(find . -maxdepth 1 -iname 'Dockerfile*' | head -n 1)
          if [ -n "$FILE" ]; then
            echo "Found Dockerfile: $FILE"
            echo "dockerfile=$FILE" >> $GITHUB_OUTPUT
            docker build -f "$FILE" -t app:${{ github.sha }} .
          else
            echo "No Dockerfile found. Skipping image scan."
            echo "dockerfile=none" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Run Trivy Scan
        if: steps.dockerfile.outputs.dockerfile != 'none'
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
          output: 'trivy-report.txt'

      - name: Upload Trivy Report
        if: steps.dockerfile.outputs.dockerfile != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

